from ..col.assign_max_min import calculate_axial_load_limits
from ..pmm_search.ecc_search.get_dcr_ecc import get_dcr_ecc
from ..pmm_search.load_combo import LoadCombination

"""
This test uses a set of load points and a given column as well as
reference values for the DCRs for those load points to check the
accuracy of the DCRs from this program. 
"""
loads = [
    [-300, 50, 0],
    [-300, 1000, 0],
    [-200, 1000, 0],
    [-100, 1000, 0],
    [0, 1000, 0],
    [100, 1000, 0],
    [200, 1000, 0],
    [300, 1000, 0],
    [400, 1000, 0],
    [500, 1000, 0],
    [600, 1000, 0],
    [700, 1000, 0],
    [800, 1000, 0],
    [900, 1000, 0],
    [1000, 1000, 0],
    [1100, 1000, 0],
    [1200, 1000, 0],
    [1300, 1000, 0],
    [1400, 1000, 0],
    [1500, 1000, 0],
    [1600, 1000, 0],
    [1700, 1000, 0],
    [1800, 1000, 0],
    [1900, 1000, 0],
    [2000, 1000, 0],
    [2100, 1000, 0],
    [2200, 1000, 0],
    [2200, 50, 0],
    [-300, -50, 0],
    [-300, -1000, 0],
    [-200, -1000, 0],
    [-100, -1000, 0],
    [0, -1000, 0],
    [100, -1000, 0],
    [200, -1000, 0],
    [300, -1000, 0],
    [400, -1000, 0],
    [500, -1000, 0],
    [600, -1000, 0],
    [700, -1000, 0],
    [800, -1000, 0],
    [900, -1000, 0],
    [1000, -1000, 0],
    [1100, -1000, 0],
    [1200, -1000, 0],
    [1300, -1000, 0],
    [1400, -1000, 0],
    [1500, -1000, 0],
    [1600, -1000, 0],
    [1700, -1000, 0],
    [1800, -1000, 0],
    [1900, -1000, 0],
    [2000, -1000, 0],
    [2100, -1000, 0],
    [2200, -1000, 0],
    [2200, -50, 0],
    [-300, 0, 50],
    [-300, 0, 1000],
    [-200, 0, 1000],
    [-100, 0, 1000],
    [0, 0, 1000],
    [100, 0, 1000],
    [200, 0, 1000],
    [300, 0, 1000],
    [400, 0, 1000],
    [500, 0, 1000],
    [600, 0, 1000],
    [700, 0, 1000],
    [800, 0, 1000],
    [900, 0, 1000],
    [1000, 0, 1000],
    [1100, 0, 1000],
    [1200, 0, 1000],
    [1300, 0, 1000],
    [1400, 0, 1000],
    [1500, 0, 1000],
    [1600, 0, 1000],
    [2000, 0, 0],
]

dcrs = [
    1.18111455,
    3.5800972,
    3.24327159,
    2.90662146,
    2.56997156,
    2.23332143,
    1.89667141,
    1.60175514,
    1.34322953,
    1.148969,
    1.01194346,
    0.911275268,
    0.9276003,
    0.9705417,
    1.01678479,
    1.06635,
    1.11907816,
    1.15417635,
    1.184222,
    1.217052,
    1.25151849,
    1.28756726,
    1.324892,
    1.36372554,
    1.40255916,
    1.44369924,
    1.48486662,
    1.31116092,
    1.18111455,
    3.5800972,
    3.24327159,
    2.90662146,
    2.56997156,
    2.23332119,
    1.896671,
    1.601755,
    1.34322941,
    1.148969,
    1.01194358,
    0.9112752,
    0.9276003,
    0.9705417,
    1.01678479,
    1.06635,
    1.11907816,
    1.15417635,
    1.184222,
    1.217052,
    1.25151849,
    1.28756726,
    1.324892,
    1.36372554,
    1.40255916,
    1.44369924,
    1.48486662,
    1.31116092,
    1.23884523,
    4.9428153,
    4.608767,
    4.274719,
    3.94067168,
    3.60662413,
    3.27257633,
    2.93852878,
    2.62903023,
    2.32137275,
    2.022534,
    1.78518534,
    1.59556031,
    1.4507966,
    1.35867274,
    1.35752714,
    1.39450872,
    1.44129765,
    1.49240327,
    1.54428363,
    1.59789062,
    1.19196439,
]

# the error tolerance for this test
tol = 1e-2


def test_get_dcr(example_col3):
    col = example_col3
    axial_limits = calculate_axial_load_limits(col)

    for i in range(78):
        load = LoadCombination(*(loads[i]), False)
        dcr = get_dcr_ecc(col, load, axial_limits)

        if dcr > 0:
            assert abs((dcr - dcrs[i]) / dcr) < tol
        else:
            assert dcrs[0] < tol
